#summary Google C++ Mocking Framework FAQ
#labels Featured

<wiki:toc max_depth="3" />

Please send your questions to the
[http://groups.google.com/group/googlemock googlemock] discussion
group. If you need help with compiler errors, make sure you have
tried [#How_am_I_supposed_to_make_sense_of_these_horrible_template_error Google Mock Doctor] first.

== How am I supposed to make sense of these horrible template errors? ==

If you are confused by the compiler errors gcc threw at you,
try consulting the _Google Mock Doctor_ tool first.  What it does is to
scan stdin for gcc error messages, and spit out diagnoses on the
problems (we call them diseases) your code has.

To "install", run command:
{{{
alias gmd='<path to googlemock>/scripts/gmock_doctor.py'
}}}

To use it, do:
{{{
<your-favorite-build-command> <your-test> 2>&1 | gmd
}}}

For example:
{{{
make my_test 2>&1 | gmd
}}}

Or you can run `gmd` and copy-n-paste gcc's error messages to it.

== How can I assert that a function is NEVER called? ==

{{{
EXPECT_CALL(foo, Bar(_))
    .Times(0);
}}}

== Eq(NULL) doesn't compile as the compiler isn't sure about the type of NULL.  Can we add a matcher to check for NULL arguments? ==

We could, but it's not really necessary as you could simply write
`NULL` as a matcher that matches a null pointer, as in:

{{{
EXPECT_CALL(foo, Bar(_, NULL));
// The first argument can be anything; the second argument must be NULL.
}}}

== I have a failed test where Google Mock tells me TWICE that a particular expectation is not satisfied.  Isn't this redundant? ==

When Google Mock detects a failure, it prints relevant information
(the mock function arguments, the state of relevant expectations, and
etc) to help the user debug.  If another failure is detected, Google
Mock will do the same, including printing the state of relevant
expectations.

Sometimes an expectation's state didn't change between two failures,
and you'll see the same description of the state twice.  They are
however _not_ redundant, as they refer to _different points in time_.
The fact they are the same _is_ interesting information.

== I get a heap check failure when using a mock object, but using a real object is fine.  What can be wrong? ==

Does the class (hopefully a pure interface) you are mocking have a
virtual destructor?

Whenever you derive from a base class, make sure it's destructor is
virtual.  Otherwise Bad Things will happen.  Consider the following
code:

{{{
class Base {
 public:
  // Not virtual, but should be.
  ~Base() { ... }
  ...
};

class Derived : public Base {
 public:
  ...
 private:
  std::string value_;
};

...
  Base* p = new Derived;
  ...
  delete p;  // Surprise! ~Base() will be called, but ~Derived() will not
             // - value_ is leaked.
}}}

By changing `~Base()` to virtual, `~Derived()` will be correctly
called when `delete p` is executed, and the heap checker
will be happy.

== The "newer expectations override older ones" rule makes writing expectations awkward.  Why does Google Mock do that? ==

When people complain about this, often they are referring to code like:

{{{
// foo.Bar() should be called twice, return 1 the first time, and return
// 2 the second time.  However, I have to write the expectations in the
// reverse order.  This sucks big time!!!
EXPECT_CALL(foo, Bar())
    .WillOnce(Return(2))
    .RetiresOnSaturation();
EXPECT_CALL(foo, Bar())
    .WillOnce(Return(1))
    .RetiresOnSaturation();
}}}

The problem, is that they didn't pick the *best* way to express the test's
intent.

By default, expectations don't have to be matched in _any_ particular
order.  If you want them to match in a certain order, you need to be
explicit.  This is Google Mock's (and jMock's) fundamental philosophy: it's
easy to accidentally over-specify your tests, and we want to make it
harder to do so.

There are two better ways to write the test spec.  You could either
put the expectations in sequence:

{{{
// foo.Bar() should be called twice, return 1 the first time, and return
// 2 the second time.  Using a sequence, we can write the expectations
// in their natural order.
{
  InSequence s;
  EXPECT_CALL(foo, Bar())
      .WillOnce(Return(1))
      .RetiresOnSaturation();
  EXPECT_CALL(foo, Bar())
      .WillOnce(Return(2))
      .RetiresOnSaturation();
}
}}}

or you can put the sequence of actions in the same expectation:

{{{
// foo.Bar() should be called twice, return 1 the first time, and return
// 2 the second time.
EXPECT_CALL(foo, Bar())
    .WillOnce(Return(1))
    .WillOnce(Return(2))
    .RetiresOnSaturation();
}}}

Back to the original questions: why does Google Mock search the
expectations (and `ON_CALL`s) from back to front?  Because this
allows a user to set up a mock's behavior for the common case early
(e.g. in the mock's constructor or the test fixture's set-up phase)
and customize it with more specific rules later.  If Google Mock
searches from front to back, this very useful pattern won't be
possible.

== Google Mock prints a warning when a function without EXPECT_CALL is called, even if I have set its behavior using ON_CALL.  Would it be reasonable not to show the warning in this case? ==

When choosing between being neat and being safe, we lean toward the
latter.  So the answer is that we think it's better to show the
warning.

Often people write `ON_CALL`s in the mock object's
constructor or `SetUp()`, as the default behavior rarely changes from
test to test.  Then in the test body they set the expectations, which
are often different for each test.  Having an `ON_CALL` in the set-up
part of a test doesn't mean that the calls are expected.  If there's
no `EXPECT_CALL` and the method is called, it's possibly an error.  If
we quietly let the call go through without notifying the user, bugs
may creep in unnoticed.

If, however, you are sure that the calls are OK, you can write

{{{
EXPECT_CALL(foo, Bar(_))
    .WillRepeatedly(...);
}}}

instead of

{{{
ON_CALL(foo, Bar(_))
    .WillByDefault(...);
}}}

This tells Google Mock that you do expect the calls and no warning should be
printed.

Also, you can control the verbosity using the `--gmock_verbose` flag.
If you find the output too noisy when debugging, just choose a less
verbose level.

== How can I delete the mock function's argument in an action? ==

If you find yourself needing to perform some action that's not
supported by Google Mock directly, remember that you can define your own
actions using
[CookBook#Writing_New_Actions MakeAction()] or
[CookBook#Writing_New_Polymorphic_Actions MakePolymorphicAction()],
or you can write a stub function and invoke it using
[CookBook#Using_Functions_Methods_Functors Invoke()].

== MOCK_METHODn()'s second argument looks funny.  Why don't you use the MOCK_METHODn(Method, return_type, arg_1, ..., arg_n) syntax? =

What?!  I think it's beautiful. :-)

While which syntax looks more natural is a subjective matter to some
extent, Google Mock's syntax was chosen for several practical advantages it
has.

Try to mock a function that takes a map as an argument:
{{{
virtual int GetSize(const map<int, std::string>& m);
}}}

Using the proposed syntax, it would be:
{{{
MOCK_METHOD1(GetSize, int, const map<int, std::string>& m);
}}}

Guess what?  You'll get a compiler error as the compiler thinks that
`const map<int, std::string>& m` are *two*, not one, arguments. To work
around this you can use `typedef` to give the map type a name, but
that gets in the way of your work.  Google Mock's syntax avoids this
problem as the function's argument types are protected inside a pair
of parentheses:
{{{
// This compiles fine.
MOCK_METHOD1(GetSize, int(const map<int, std::string>& m));
}}}

You still need a `typedef` if the return type contains an unprotected
comma, but that's much rarer.

Other advantages include:
  # `MOCK_METHOD1(Foo, int, bool)` can leave a reader wonder whether the method returns `int` or `bool`, while there won't be such confusion using Google Mock's syntax.
  # The way Google Mock describes a function type is nothing new, although many people may not be familiar with it.  The same syntax was used in C, and the `function` library in `tr1` uses this syntax extensively.  Since `tr1` will become a part of the new version of STL, we feel very comfortable to be consistent with it.
  # The function type syntax is also used in other parts of Google Mock's API (e.g. the action interface)in order to make the implementation tractable. A user needs to learn it anyway in order to utilize Google Mock's more advanced features.  We'd as well stick to the same syntax in `MOCK_METHOD*`!

== My code calls a static/global function.  Can I mock it? ==

You can, but you need to make some changes.

In general, if you find yourself needing to mock a static function,
it's a sign that your modules are too tightly coupled (and less
flexible, less reusable, less testable, etc).  You are probably better
off defining a small interface and call the function through that
interface, which then can be easily mocked.  It's a bit of work
initially, but usually pays for itself quickly.

This Google Testing Blog
[http://googletesting.blogspot.com/2008/06/defeat-static-cling.html post]
says it excellently.  Check it out.

== My mock object needs to do complex stuff.  It's a lot of pain to specify the actions.  Google Mock sucks! ==

I know it's not a question, but you get an answer for free any way. :-)

With Google Mock, you can create mocks in C++ easily.  And people might be
tempted to use them everywhere. Sometimes they work great, and
sometimes you may find them, well, a pain to use. So, what's wrong in
the latter case?

When you write a test without using mocks, you exercise the code and
assert that it returns the correct value or that the system is in an
expected state.  This is sometimes called "state-based testing".

Mocks are great for what some call "interaction-based" testing:
instead of checking the system state at the very end, mock objects
verify that they are invoked the right way and report an error as soon
as it arises, giving you a handle on the precise context in which the
error was triggered.  This is often more effective and economical to
do than state-based testing.

If you are doing state-based testing and using a test double just to
simulate the real object, you are probably better off using a fake.
Using a mock in this case causes pain, as it's not a strong point for
mocks to perform complex actions.  If you experience this and think
that mocks suck, you are just not using the right tool for your
problem. Or, you might be trying to solve the wrong problem. :-)

== I got a warning "Uninteresting function call encountered - default action taken.."  Should I panic? ==

By all means, NO!  It's just an FYI. :-)

What it means is that you have a mock function, you haven't set any
expectations on it (by Google Mock's rule this means that you are not
interested in calls to this function and therefore it can be called
any number of times), and it is called.  That's OK - you didn't say
it's not OK to call the function!

What if you actually meant to disallow this function to be called, but
forgot to write `EXPECT_CALL(foo, Bar()).Times(0)`?  While
one can argue that it's the user's fault, Google Mock tries to be nice and
prints you a note.

So, when you see the message and believe that there shouldn't be any
uninteresting calls, you should investigate what's going on.  To make
your life easier, Google Mock prints the function name and arguments
when an uninteresting call is encountered.

== I want to define a custom action.  Should I use Invoke() or implement the action interface? ==

Either way is fine - you want to choose the one that's more convenient
for your circumstance.

Usually, if your action is for a particular function type, defining it
using `Invoke()` should be easier; if your action can be used in
functions of different types (e.g. if you are defining
`Return(value)`), `MakePolymorphicAction()` is
easiest.  Sometimes you want precise control on what types of
functions the action can be used in, and implementing
`ActionInterface` is the way to go here. See the implementation of
`Return()` in `include/gmock/gmock-actions.h` for an example.

== I'm using the set-argument-pointee action, and the compiler complains about "conflicting return type specified".  What does it mean? ==

You got this error as Google Mock has no idea what value it should return
when the mock method is called.  `SetArgumentPointee()` says what the
side effect is, but doesn't say what the return value should be.  You
need `DoAll()` to chain a `SetArgumentPointee()` with a `Return()`.

See this [CookBook#Mocking_Side_Effects recipe] for more details and an example.